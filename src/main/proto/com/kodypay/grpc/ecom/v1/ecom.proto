syntax = "proto3";
package com.kodypay.grpc.ecom.v1;
option java_multiple_files = true;
option java_outer_classname = "KodyEcomPaymentsProto";
option java_package = "com.kodypay.grpc.ecom.v1";
import "google/protobuf/timestamp.proto";

// All service requests require X-API-Key header with 'API Key' value
service KodyEcomPaymentsService {
  // Initiates a payment and returns a URL for the user to complete payment
  rpc InitiatePayment(PaymentInitiationRequest) returns (PaymentInitiationResponse);
  rpc InitiatePaymentStream(PaymentInitiationRequest) returns (stream PaymentDetailsResponse);
  rpc PaymentDetails(PaymentDetailsRequest) returns (PaymentDetailsResponse);
  rpc PaymentDetailsStream(PaymentDetailsRequest) returns (stream PaymentDetailsResponse);
  rpc GetPayments(GetPaymentsRequest) returns (GetPaymentsResponse);
  rpc GetCardToken(GetCardTokenRequest) returns (GetCardTokenResponse);
  rpc Refund(RefundRequest) returns (stream RefundResponse);
  rpc DeleteCardToken(DeleteCardTokenRequest) returns (DeleteCardTokenResponse);
}

// Payment Initiation Request
message PaymentInitiationRequest {
  string store_id = 1; // Your Kody store id
  string payment_reference = 2; // Your unique reference of this payment request.
  uint64 amount_minor_units = 3; // Amount in minor units. For example, 2000 means GBP 20.00.
  string currency = 4; // ISO 4217 three letter currency code
  string order_id = 5; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
  optional string order_metadata = 6; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
  string return_url = 7; // The URL that your client application will be redirected to after the payment is authorised. You can include additional query parameters, for example, the user id or order reference.
  optional string payer_statement = 8; // The text to be shown on the payer's bank statement. Maximum 22 characters, otherwise banks might truncate the string. If not set it will use the store's terminals receipt printing name. Allowed characters: a-z, A-Z, 0-9, spaces, and special characters . , ' _ - ? + * /
  optional string payer_email_address = 9; // We recommend that you provide this data, as it is used in velocity fraud checks. Required for 3D Secure 2 transactions.
  optional string payer_ip_address = 10; // The payer IP address used for risk checks, also required for 3D Secure 2 transactions.
  optional string payer_locale = 11; // The language code and country code to specify the language to display the payment pages. It will default to en_GB if not set.
  optional bool tokenise_card = 12; // defaults false
  optional ExpirySettings expiry = 13; // Nested message for expiry settings
  optional CaptureOptions capture_options = 14; // Optional capture settings
  optional bool is_pay_by_bank_accepted = 15; // Whether the payer can pay via pay by bank (Kody store must have pay by bank configured)
  optional string shopper_reference = 16; // The shopper reference used for the payment, will be used to match tokenised payment methods, should be a unique identifier, if applicable.
  optional RecurringProcessingModel  recurring_processing_model = 17; // The recurring model to use for the payment, if applicable. Can be 'Subscription', 'UnscheduledCardOnFile' or 'CardOnFile'.

  message ExpirySettings {
    bool show_timer = 1; // Display a countdown timer to the user in the payment page, default is false
    uint64 expiring_seconds = 2; // Timeout duration in seconds, defaults to 1800 seconds (30 minutes)
  }

  message CaptureOptions {
    CaptureSettings capture_settings = 1;
    optional ReleaseSettings release_settings = 2;

    message CaptureSettings {
      bool delayed_capture = 1; // If true, the capture will be delayed until manually triggered. Default is false
      optional int32 auto_capture_interval_mins = 2; // Automatically capture the payment after the specified interval in minutes
      bool auto_capture_store_close_time = 3; // Automatically capture the payment at the store's closing time
    }

    message ReleaseSettings { // if not set, the funds will be released automatically by the card issuer
      bool delayed_release = 1; // If true, the release of funds will be delayed until manually triggered
      optional int32 auto_release_interval_mins = 2; // Automatically release the funds after the specified interval in minutes
      bool auto_release_store_close_time = 3; // Automatically release the funds at the store's closing time
    }
  }

  enum RecurringProcessingModel {
    CARD_ON_FILE = 0; // Card on file model
    SUBSCRIPTION = 1; // Subscription model
    UNSCHEDULED_CARD_ON_FILE = 2; // Unscheduled card on file model
  }
}

// Payment Initiation Response
message PaymentInitiationResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
    string payment_id = 1; // The unique identifier created by Kody
    string payment_url = 2; // The URL to send the user to from your application
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      DUPLICATE_ATTEMPT = 1;
      INVALID_REQUEST = 2;
    }
  }
}

message PaymentDetailsRequest {
  string store_id = 1; // Your Kody store id
  oneof payment_identifier {
    string payment_id = 2; // The unique identifier created by Kody
    string payment_reference = 3; // Your unique payment reference that was set during the initiation
  }
}

message GetCardTokenRequest {
  string store_id = 1; // Your Kody store id
  oneof payment_identifier {
    string payment_id = 2; // The unique identifier created by Kody
    string payment_reference = 3; // Your unique payment reference that was set during the initiation
    string token = 4; // The unique identifier of the card token to be retrieved
  }
}

message GetCardTokenResponse {
  string token = 1;
  string expiry = 2;
  CardTokenStatus status = 3;
  string shopper_reference = 4; // The shopper reference used for the payment, if applicable.
  string brand = 5; // Card brand, e.g. mc, visa and so on
  string variant = 6; // Card variant, e.g. mccredit, mcdebit, visa, visadebit, etc.
  string holder_name = 7; // Cardholder name
  string issuer_name = 8; // Issuer name of the card
  string card_last_four = 9; // Last four digits of the card number
  string created_at = 10; // Date when the stored payment method was created
  optional string payment_id = 11; // payment id associated with the stored payment method, if applicable
  optional string payment_reference = 12; // the external payment reference associated with the stored payment method, if applicable
  repeated string supported_recurring_processing_models = 13; // Supported recurring processing models

  enum CardTokenStatus {
    PENDING = 0;
    FAILED = 1;
    READY = 2;
    DELETED = 3;
  }
}

message PaymentDetailsResponse {
  oneof result {
    PaymentDetails response = 1;
    Error error = 2;
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      NOT_FOUND = 1;
      INVALID_REQUEST = 2;
      DUPLICATE_ATTEMPT = 3;
    }
  }

  message PaymentDetails {
    string payment_id = 1; // The unique identifier created by Kody
    string payment_reference = 2 [deprecated=true]; // Your unique payment reference that was set during the initiation
    string order_id = 3 [deprecated=true]; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
    optional string order_metadata = 4 [deprecated=true]; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
    PaymentStatus status = 5;
    optional string payment_data_json = 6 [ deprecated = true ];

    google.protobuf.Timestamp date_created = 7;
    optional google.protobuf.Timestamp date_paid =8  [deprecated=true];
    optional string psp_reference = 9 [deprecated=true];
    optional string payment_method = 10[deprecated=true];

    optional PaymentData payment_data = 11; // PaymentData can be absent if payment has not been initiated
    optional SaleData sale_data = 12;
  }

  // PaymentData message for the e-commerce domain.
  message PaymentData {
    string psp_reference = 1;
    PaymentMethods payment_method = 2;
    string payment_method_variant = 3;
    PaymentAuthStatus auth_status =4;
    google.protobuf.Timestamp auth_status_date = 5; // The date and time of the auth status change.

    enum PaymentAuthStatus {
      PENDING = 0;
      AUTHORISED = 1;
      FAILED = 2;
      CAPTURED = 3;
      RELEASED = 4;
      EXPIRED = 5;
    }

    oneof payment_method_details {
      PaymentCard payment_card = 6;
      PaymentWallet payment_wallet = 7;
    }
    message PaymentCard{
      string card_last_4_digits =1;
      // The authorization code for the transaction.
      string auth_code =2;
      string payment_token = 3;
    }

    message PaymentWallet{
      optional string card_last_4_digits =1;
      string payment_link_id = 2;
    }
  }

  // SaleData message for the e-commerce domain.
  message SaleData {
    uint64 amount_minor_units = 1; // Amount in minor units. For example, 2000 means GBP 20.00.
    string currency = 2; // ISO 4217 three letter currency code
    string order_id = 3; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
    string payment_reference = 4; // Your unique reference of this payment request.
    optional string order_metadata = 5; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
  }
}

message GetPaymentsRequest {
  string store_id = 1;
  PageCursor page_cursor = 2;
  Filter filter = 3;

  message Filter {
    optional string order_id = 1;
    optional google.protobuf.Timestamp created_before = 2;
  }

  message PageCursor {
    int64 page = 1;
    int64 page_size = 2;
  }
}
message GetPaymentsResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
    repeated DeprecatedPaymentDetails deprecated_payments = 1 [deprecated = true];
    int64 total = 2;
    repeated PaymentDetailsResponse.PaymentDetails payments = 3 ;

    message DeprecatedPaymentDetails {
      string payment_id = 1; // The unique identifier created by Kody
      string payment_reference = 2; // Your unique payment reference that was set during the initiation
      string order_id = 3; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
      optional string order_metadata = 4; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
      PaymentStatus status = 5;
      optional string payment_data_json = 6; // json blob containing payment data

      google.protobuf.Timestamp date_created = 7;
      optional google.protobuf.Timestamp date_paid = 8;
      optional string psp_reference = 9;
      optional string payment_method = 10;
    }
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      NOT_FOUND = 1;
      INVALID_ARGUMENT = 2;
    }
  }
}

message RefundRequest {
  string store_id = 1; // UUID of store
  oneof id {
    string payment_id = 2; // Payment id created by wombat
    string psp_reference = 4;
  }
  string amount = 3; // amount in BigDecimal/2.dp (0.00)
}
message RefundResponse {
  RefundStatus status = 1;
  optional string failure_reason = 2; // only populated on failure
  string payment_id = 3;
  google.protobuf.Timestamp date_created = 4;
  string total_paid_amount = 5;
  string total_amount_refunded = 6;
  string remaining_amount = 7;
  string total_amount_requested = 8;
  string paymentTransactionId = 9;
  enum RefundStatus {
    PENDING = 0;
    REQUESTED = 1;
    FAILED = 2;
  }
}

enum PaymentMethods {
  VISA = 0;
  MASTERCARD = 1;
  AMEX = 2;
  BAN_CONTACT = 3;
  CHINA_UNION_PAY = 4;
  MAESTRO = 5;
  DINERS = 6;
  DISCOVER = 7;
  JCB = 8;
  ALIPAY = 9;
  WECHAT = 10;
}

enum PaymentStatus {
  PENDING = 0;
  SUCCESS = 1;
  FAILED = 2;
  CANCELLED = 3;
  EXPIRED = 4;
}

message DeleteCardTokenRequest {
  string store_id = 1; // Kody store id
  string token = 2; // The unique identifier of the card token to be deleted
}

message DeleteCardTokenResponse {
  Status status = 1;
  optional string error_message = 2; // Provides details if the deletion failed

  enum Status {
    UNKNOWN = 0;
    DELETED = 1;
    NOT_FOUND = 2;
    FAILED = 3;
  }
}
