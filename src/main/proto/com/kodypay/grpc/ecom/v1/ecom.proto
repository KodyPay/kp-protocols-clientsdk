syntax = "proto3";
package com.kodypay.grpc.ecom.v1;
option java_multiple_files = true;
option java_outer_classname = "KodyEcomPaymentsProto";
option java_package = "com.kodypay.grpc.ecom.v1";
import "google/protobuf/timestamp.proto";

// All service requests require X-API-Key header with 'API Key' value
service KodyEcomPaymentsService {
  // Initiates a payment and returns a URL for the user to complete payment
  rpc InitiatePayment(PaymentInitiationRequest) returns (PaymentInitiationResponse);
  rpc InitiatePaymentStream(PaymentInitiationRequest) returns (stream PaymentDetailsResponse);
  rpc PaymentDetails(PaymentDetailsRequest) returns (PaymentDetailsResponse);
  rpc PaymentDetailsStream(PaymentDetailsRequest) returns (stream PaymentDetailsResponse);
  rpc GetPayments(GetPaymentsRequest) returns (GetPaymentsResponse);
  rpc Refund(RefundRequest) returns (stream RefundResponse);
  rpc CreateCardToken(CreateTokenRequest) returns (CreateTokenResponse);
  rpc GetCardToken(GetCardTokenRequest) returns (GetCardTokenResponse);
  rpc DeleteCardToken(DeleteCardTokenRequest) returns (DeleteCardTokenResponse);
  rpc GetCardTokens(GetCardTokensRequest) returns (GetCardTokensResponse);
  rpc PayWithCardToken(PayWithCardTokenRequest) returns (PaymentDetailsResponse);
}

// Payment Initiation Request
message PaymentInitiationRequest {
  string store_id = 1; // Your Kody store id
  string payment_reference = 2; // Your unique reference of this payment request.
  uint64 amount_minor_units = 3; // Amount in minor units. For example, 2000 means GBP 20.00.
  string currency = 4; // ISO 4217 three letter currency code
  string order_id = 5; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
  optional string order_metadata = 6; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
  string return_url = 7; // The URL that your client application will be redirected to after the payment is authorised. You can include additional query parameters, for example, the user id or order reference.
  optional string payer_statement = 8; // The text to be shown on the payer's bank statement. Maximum 22 characters, otherwise banks might truncate the string. If not set it will use the store's terminals receipt printing name. Allowed characters: a-z, A-Z, 0-9, spaces, and special characters . , ' _ - ? + * /
  optional string payer_email_address = 9; // We recommend that you provide this data, as it is used in velocity fraud checks. Required for 3D Secure 2 transactions.
  optional string payer_ip_address = 10; // The payer IP address used for risk checks, also required for 3D Secure 2 transactions.
  optional string payer_locale = 11; // The language code and country code to specify the language to display the payment pages. It will default to en_GB if not set.
  optional bool tokenise_card = 12 [deprecated = true]; // defaults false
  optional ExpirySettings expiry = 13; // Nested message for expiry settings
  optional CaptureOptions capture_options = 14; // Optional capture settings
  optional bool is_pay_by_bank_accepted = 15; // Whether the payer can pay via pay by bank (Kody store must have pay by bank configured)

  message ExpirySettings {
    bool show_timer = 1; // Display a countdown timer to the user in the payment page, default is false
    uint64 expiring_seconds = 2; // Timeout duration in seconds, defaults to 1800 seconds (30 minutes)
  }

  message CaptureOptions {
    CaptureSettings capture_settings = 1;
    optional ReleaseSettings release_settings = 2;

    message CaptureSettings {
      bool delayed_capture = 1; // If true, the capture will be delayed until manually triggered. Default is false
      optional int32 auto_capture_interval_mins = 2; // Automatically capture the payment after the specified interval in minutes
      bool auto_capture_store_close_time = 3; // Automatically capture the payment at the store's closing time
    }

    message ReleaseSettings { // if not set, the funds will be released automatically by the card issuer
      bool delayed_release = 1; // If true, the release of funds will be delayed until manually triggered
      optional int32 auto_release_interval_mins = 2; // Automatically release the funds after the specified interval in minutes
      bool auto_release_store_close_time = 3; // Automatically release the funds at the store's closing time
    }
  }
}

// Payment Initiation Response
message PaymentInitiationResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
    string payment_id = 1; // The unique identifier created by Kody
    string payment_url = 2; // The URL to send the user to from your application
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      DUPLICATE_ATTEMPT = 1;
      INVALID_REQUEST = 2;
    }
  }
}

message PaymentDetailsRequest {
  string store_id = 1; // Your Kody store id
  oneof payment_identifier {
    string payment_id = 2; // The unique identifier created by Kody
    string payment_reference = 3; // Your unique payment reference that was set during the initiation
  }
}

message PaymentDetailsResponse {
  oneof result {
    PaymentDetails response = 1;
    Error error = 2;
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      NOT_FOUND = 1;
      INVALID_REQUEST = 2;
      DUPLICATE_ATTEMPT = 3;
    }
  }

  message PaymentDetails {
    string payment_id = 1; // The unique identifier created by Kody
    string payment_reference = 2 [deprecated=true]; // Your unique payment reference that was set during the initiation
    string order_id = 3 [deprecated=true]; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
    optional string order_metadata = 4 [deprecated=true]; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
    PaymentStatus status = 5;
    optional string payment_data_json = 6 [ deprecated = true ];

    google.protobuf.Timestamp date_created = 7;
    optional google.protobuf.Timestamp date_paid =8  [deprecated=true];
    optional string psp_reference = 9 [deprecated=true];
    optional string payment_method = 10[deprecated=true];

    optional PaymentData payment_data = 11; // PaymentData can be absent if payment has not been initiated
    optional SaleData sale_data = 12;
  }

  // PaymentData message for the e-commerce domain.
  message PaymentData {
    string psp_reference = 1;
    PaymentMethods payment_method = 2;
    string payment_method_variant = 3;
    PaymentAuthStatus auth_status =4;
    google.protobuf.Timestamp auth_status_date = 5; // The date and time of the auth status change.

    enum PaymentAuthStatus {
      PENDING = 0;
      AUTHORISED = 1;
      FAILED = 2;
      CAPTURED = 3;
      RELEASED = 4;
      EXPIRED = 5;
    }

    oneof payment_method_details {
      PaymentCard payment_card = 6;
      PaymentWallet payment_wallet = 7;
    }
    message PaymentCard{
      string card_last_4_digits =1;
      // The authorization code for the transaction.
      string auth_code =2;
      string payment_token = 3 [deprecated = true];
    }

    message PaymentWallet{
      optional string card_last_4_digits =1;
      string payment_link_id = 2;
    }
  }

  // SaleData message for the e-commerce domain.
  message SaleData {
    uint64 amount_minor_units = 1; // Amount in minor units. For example, 2000 means GBP 20.00.
    string currency = 2; // ISO 4217 three letter currency code
    string order_id = 3; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
    string payment_reference = 4; // Your unique reference of this payment request.
    optional string order_metadata = 5; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
  }
}

message GetPaymentsRequest {
  string store_id = 1;
  PageCursor page_cursor = 2;
  Filter filter = 3;

  message Filter {
    optional string order_id = 1;
    optional google.protobuf.Timestamp created_before = 2;
  }

  message PageCursor {
    int64 page = 1;
    int64 page_size = 2;
  }
}
message GetPaymentsResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
    repeated DeprecatedPaymentDetails deprecated_payments = 1 [deprecated = true];
    int64 total = 2;
    repeated PaymentDetailsResponse.PaymentDetails payments = 3 ;

    message DeprecatedPaymentDetails {
      string payment_id = 1; // The unique identifier created by Kody
      string payment_reference = 2; // Your unique payment reference that was set during the initiation
      string order_id = 3; // Your identifier of the order. It doesn't have to be unique, for example when the same order has multiple payments.
      optional string order_metadata = 4; // A data set that can be used to store information about the order and used in the payment details. For example a JSON with checkout items. It will be useful as evidence to challenge chargebacks or any risk data.
      PaymentStatus status = 5;
      optional string payment_data_json = 6; // json blob containing payment data

      google.protobuf.Timestamp date_created = 7;
      optional google.protobuf.Timestamp date_paid = 8;
      optional string psp_reference = 9;
      optional string payment_method = 10;
    }
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      NOT_FOUND = 1;
      INVALID_ARGUMENT = 2;
    }
  }
}

message RefundRequest {
  string store_id = 1; // UUID of store
  oneof id {
    string payment_id = 2; // Payment id created by wombat
    string psp_reference = 4;
  }
  string amount = 3; // amount in BigDecimal/2.dp (0.00)
}
message RefundResponse {
  RefundStatus status = 1;
  optional string failure_reason = 2; // only populated on failure
  string payment_id = 3;
  google.protobuf.Timestamp date_created = 4;
  string total_paid_amount = 5;
  string total_amount_refunded = 6;
  string remaining_amount = 7;
  string total_amount_requested = 8;
  string paymentTransactionId = 9;
  enum RefundStatus {
    PENDING = 0;
    REQUESTED = 1;
    FAILED = 2;
  }
}

enum PaymentMethods {
  VISA = 0;
  MASTERCARD = 1;
  AMEX = 2;
  BAN_CONTACT = 3;
  CHINA_UNION_PAY = 4;
  MAESTRO = 5;
  DINERS = 6;
  DISCOVER = 7;
  JCB = 8;
  ALIPAY = 9;
  WECHAT = 10;
}

enum PaymentStatus {
  PENDING = 0;
  SUCCESS = 1;
  FAILED = 2;
  CANCELLED = 3;
  EXPIRED = 4;
}

message CreateTokenRequest {
  string store_id = 1; // Your Kody store id
  string idempotency_uuid = 2; // Idempotency key to ensure the request is processed only once, generated by client.
  optional string token_reference = 3; // Your unique reference for this token request, if applicable. This can be used to match the token with your internal systems.
  string payer_reference = 4; // The payer for whom the token is being created. This can be a user ID or any unique identifier you use to track users.
  optional string metadata = 5; // A data set that can be used to store information about the order and used in the tokenisation process.
  string return_url = 6; // The URL that your client application will be redirected to after the tokenisation is authorised. You can include additional query parameters, for example, the user id or order reference.
  optional string payer_statement = 7; // The text to be shown on the payer's bank statement. Maximum 22 characters, otherwise banks might truncate the string. If not set it will use the store's terminals receipt printing name. Allowed characters: a-z, A-Z, 0-9, spaces, and special characters . , ' _ - ? + * /
  optional string payer_email_address = 8; // We recommend that you provide this data, as it is used in velocity fraud checks. Required for 3D Secure 2 transactions.
  optional string payer_phone_number = 9; // We recommend that you provide this data, as it is used in velocity fraud checks. Required for 3D Secure 2 transactions.
  optional RecurringProcessingModel recurring_processing_model = 10; // The recurring model to use for the payment, if applicable. Can be 'Subscription', 'UnscheduledCardOnFile' or 'CardOnFile'.
}

enum RecurringProcessingModel {
  MODEL_UNSPECIFIED = 0;  // Default value, not set
  CARD_ON_FILE = 1; // Card on file model
  SUBSCRIPTION = 2; // Subscription model
  UNSCHEDULED_CARD_ON_FILE = 3; // Unscheduled card on file model
}

message CreateTokenResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
    string token_id = 1; // The unique identifier created by Kody
    string create_token_url = 2; // The URL to send the user to from your application
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      DUPLICATE_ATTEMPT = 1;
      INVALID_REQUEST = 2;
    }
  }
}

message GetCardTokenRequest {
  string store_id = 1; // Your Kody store id
  oneof token_identifier {
    string token_id = 2; // The unique identifier created by Kody
    string token_reference = 3; // Your unique payment reference that was set during the initiation
  }
}

message GetCardTokenResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
    string token_id = 1; // id from the 0 amount Ecom payment used to tokenise the stored payment method.
    optional string token_reference = 2; // the external payment reference associated with the stored payment method, if applicable
    string payment_token = 3; // Unique identifier for the stored payment method as created by Kody, e.g. a token that can be used for future payments
    string payer_reference = 4; // The payer for whom the token is created, e.g. user id or any unique identifier you use to track users
    RecurringProcessingModel recurring_processing_model = 5; // Recurring processing model
    CardTokenStatus status = 6;
    google.protobuf.Timestamp created_at = 7; // Date when the token was created
    PaymentMethods payment_method = 8; // Card brand, e.g. mc, visa and so on
    string payment_method_variant = 9; // Card variant, e.g. mccredit, mcdebit, visa, visadebit, etc.
    string funding_source = 10; // Funding source of the card, e.g. CREDIT, DEBIT, PREPAID, etc. (aligns with PaymentCard.funding_source)
    string card_last_4_digits = 11; // Last four digits of the card number (aligns with PaymentCard.card_last_4_digits)
  }

  enum CardTokenStatus {
    PENDING = 0;
    FAILED = 1;
    READY = 2;
    DELETED = 3;
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      PENDING_CREATE = 1; // Token not yet created, still in progress
      INVALID_REQUEST = 2;
    }
  }
}

message DeleteCardTokenRequest {
  string store_id = 1; // Kody store id
  string token_id = 2; // The unique identifier of the card token to be deleted
}

message DeleteCardTokenResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      NOT_FOUND = 1; // Maps from original Status.NOT_FOUND
      FAILED = 2;    // Maps from original Status.FAILED
      INVALID_REQUEST = 3; // Adding a common error type
    }
  }
}

message GetCardTokensRequest {
  string store_id = 1;
  string payer_reference = 2; // The shopper for whom to list tokens
}

message GetCardTokensResponse {
  oneof result {
    Response response = 1;
    Error error = 2;
  }

  message Response {
    repeated GetCardTokenResponse.Response tokens = 1;
  }

  message Error {
    Type type = 1;
    string message = 2;

    enum Type {
      UNKNOWN = 0;
      INVALID_REQUEST = 1; // e.g. missing store_id or payer_reference
    }
  }
}

message PayWithCardTokenRequest {
  string store_id = 1; // Your Kody store id
  string idempotency_uuid = 2; // Idempotency key to ensure the request is processed only once, can be generated by client.
  string payment_token = 3; // The ID of the payment token to be charged
  uint64 amount_minor_units = 4; // Amount in minor units. For example, 2000 means GBP 20.00.
  string currency = 5; // ISO 4217 three letter currency code
  string payment_reference = 6; // Your unique reference for this payment
  string order_id = 7; // Your identifier for the order
  optional string order_metadata = 8; // Optional order details
  optional string payer_statement = 9; // Optional text for payer's bank statement
  optional PaymentInitiationRequest.CaptureOptions capture_options = 10; // Optional capture settings if the charge is an authorization
}
