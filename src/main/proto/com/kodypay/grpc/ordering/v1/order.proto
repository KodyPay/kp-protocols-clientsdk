syntax = "proto3";

package com.kodypay.grpc.ordering.v1;
option java_multiple_files = true;
option java_outer_classname = "OrderProto";
option java_package = "com.kodypay.grpc.ordering.v1";
import "google/protobuf/timestamp.proto";

// Service definition for managing Ordering orders.
service OrderService {
  // RPC to retrieve orders based on filter criteria.
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);
  rpc UpdateOrderStatus(UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse);

  // RPC to refund a specific item in an order.
  rpc RefundItem(RefundItemRequest) returns (RefundItemResponse);
  // RPC to refund an entire order.
  rpc RefundOrder(RefundOrderRequest) returns (RefundOrderResponse);
}

// Request to fetch orders for a specific store.
message GetOrdersRequest {
  // Store ID for which orders are fetched.
  string store_id = 1;

  // Filter for the order status.
  repeated OrderStatus status_in = 2;

  // Orders >= this date
  optional google.protobuf.Timestamp after_date = 3;

  // Optional pagination token (for large datasets).
  optional string page_token = 4;

  // Maximum number of orders to return.
  optional int32 page_size = 5;
}

// Response containing the list of orders.
message GetOrdersResponse {
  // List of orders for the given store and filters.
  repeated Order orders = 1;

  // Token for the next page of results, if any.
  string next_page_token = 2;
}

message UpdateOrderStatusRequest {
  // Store ID for which the order status is being updated.
  string store_id = 1;

  // Order ID for which the status is being updated.
  string order_id = 2;

  // UUID idempotency key. Will be generated by client.
  string idempotency_uuid = 3;

  // New status for the order.
  OrderStatus new_status = 4;
}

message UpdateOrderStatusResponse {
  // Indicates if the update was successful.
  bool success = 1;

  // Optional message providing additional information about the update.
  optional string message = 2;
}

message RefundItemRequest {
  // Store ID for which the refund is being processed.
  string store_id = 1;
  // Order ID containing the item to be refunded.
  string order_id = 2;
  // UUID idempotency key. Will be generated by client.
  string idempotency_uuid = 3;
  // Item IDs to be refunded.
  repeated RefundItem items = 4;
  // Optional reason for the refund.
  optional string reason = 5;

  message RefundItem {
    string order_item_id = 1;
    uint32 quantity = 2;
  }
}

// Response for refunding a specific item in an order.
message RefundItemResponse {
  // Indicates if the refund was successful.
  bool success = 1;
  // Total amount refunded.
  string amount = 2;
  // Optional message providing additional information about the refund.
  optional string message = 3;
}

// Request to refund an entire order.
message RefundOrderRequest {
  // Store ID for which the refund is being processed.
  string store_id = 1;
  // Order ID to be refunded.
  string order_id = 2;
  // UUID idempotency key. Will be generated by client.
  string idempotency_uuid = 3;
  // Optional reason for the refund.
  optional string reason = 4;
}

// Response for refunding an entire order.
message RefundOrderResponse {
  // Indicates if the refund was successful.
  bool success = 1;
  // Total amount refunded.
  string amount = 2;
  // Optional message providing additional information about the refund.
  optional string message = 3;
}

// Order details for the response.
message Order {
  //(UUID) generated by client
  string order_id = 1;
  // Store ID for which the order is placed.
  string store_id = 2;

  // List of items or combos in the order.
  repeated OrderItemOrCombo items = 3;
  optional string order_notes = 4;
  //(BigDecimal) total = sum(items) + service + delivery - discount
  string total_amount = 5;
  // table number for restaurant orders from a counter
  optional string location_number = 6;
  OrderStatus status = 7;
  optional google.protobuf.Timestamp date_created = 8; // set by server when order is received for first time

  message OrderItemOrCombo {
    oneof type {
      OrderItemWithAddOns item = 1;
      OrderCombo combo = 2;
    }
  }
  message OrderItemWithAddOns {
    //(UUID) generated by client
    string order_item_id = 1;
    optional string  integration_id = 2;
    uint32 quantity = 3;
    optional string item_notes = 4;
    repeated OrderAddOnItem addons = 6;
    // price of individual item
    string unit_price = 7;
    string merchant_item_id = 8;
  }
  message OrderCombo {
    //(UUID) generated by client
    string order_combo_id = 1;
    string combo_id = 2;
    uint32 quantity = 3;
    optional string combo_notes = 4;
    repeated OrderItemWithAddOns items = 5;
    // price of individual combo
    string unit_price = 6;
    optional string  integration_id = 7;
    string merchant_item_id = 8;
  }
  message OrderAddOnItem {
    uint32 quantity = 1;
    string item_notes = 2;
    string parent_item_id = 3;
    // price of individual addon
    string unit_price = 4;
    optional string  integration_id = 5;
    string merchant_item_id = 6;
  }
}

// Integration Order Status
enum OrderStatus {
  UNPAID = 0;
  NEW_ORDER = 1;
  PENDING = 2;
  COMPLETED = 3;
  DECLINED = 4;
  FAILED = 5;
  PICKED = 6;
}
