syntax = "proto3";
package com.kodypay.grpc.token.v1;
option java_multiple_files = true;
option java_outer_classname = "KodyCardTokenProto";
option java_package = "com.kodypay.grpc.token.v1";
import "google/protobuf/timestamp.proto";

// All service requests require X-API-Key header with 'API Key' value
service KodyCardTokenService {
  rpc CreateCardToken(CreateCardTokenRequest) returns (stream CreateCardTokenResponse);
  rpc GetCardToken(GetCardTokenRequest) returns (GetCardTokenResponse);
}

message CreateCardTokenRequest {
  string store_id = 1; // Your Kody store id
  optional string terminal_id = 2; // Terminal id where the tokenisation request is sent from, if applicable. Required when obtaining the token through the terminal.
  string idempotency_uuid = 3; // Idempotency key to ensure the request is processed only once, generated by client.
  string token_reference = 4; // Your unique reference for this token request, if applicable. This can be used to match the token with your internal systems.
  optional string payer_reference = 5; // The payer for whom the token is created, e.g. user id or any unique identifier you use to track users
  optional RecurringProcessingModel recurring_processing_model = 6; // The recurring model to use for the payment, if applicable. Can be 'Subscription', 'UnscheduledCardOnFile' or 'CardOnFile'.
}

message CreateCardTokenResponse {
  oneof result {
    TokenDetails response = 1;
    Error error = 2;
  }
}

message GetCardTokenRequest {
  string store_id = 1; // Your Kody store id
  oneof token_identifier {
    string token_id = 2; // The unique identifier created by Kody
    string token_reference = 3; // Your unique payment reference that was set during the initiation
  }
}

message GetCardTokenResponse {
  oneof result {
    TokenDetails response = 1;
    Error error = 2;
  }
}

message TokenDetails {
  string token_id = 1; // The unique identifier created by Kody
  string token_reference = 2; // the external payment reference associated with the stored payment method, if applicable
  optional string payment_token = 3; // Unique identifier for the stored payment method as created by Kody, e.g. a token that can be used for future payments
  optional string payer_reference = 4; // The payer for whom the token is created, e.g. user id or any unique identifier you use to track users
  optional RecurringProcessingModel recurring_processing_model = 5; // Recurring processing model
  optional CardTokenStatus status = 6; // Status of the token
  optional google.protobuf.Timestamp created_at = 7; // Date when the token was created
  optional CardInfo card_info = 8; // Card information

  message CardInfo {
    PaymentMethods payment_method = 1; // Card brand, e.g. mc, visa and so on
    string payment_method_variant = 2; // Card variant, e.g. mccredit, mcdebit, visa, visadebit, etc.
    string funding_source = 3; // Funding source of the card, e.g. CREDIT, DEBIT, PREPAID, etc. (aligns with PaymentCard.funding_source)
    string card_last_4_digits = 4; // Last four digits of the card number (aligns with PaymentCard.card_last_4_digits)
    string card_expiry_date = 5; // Expiry date of the card
    string pos_entry_mode = 6; // POS entry mode of the card
  }
}

message Error {
  Type type = 1;
  string message = 2;

  enum Type {
    UNKNOWN = 0;
    DUPLICATE_ATTEMPT = 1;
    INVALID_REQUEST = 2;
  }
}

enum RecurringProcessingModel {
  MODEL_UNSPECIFIED = 0;  // Default value, not set
  CARD_ON_FILE = 1; // Card on file model
  SUBSCRIPTION = 2; // Subscription model
  UNSCHEDULED_CARD_ON_FILE = 3; // Unscheduled card on file model
}

enum CardTokenStatus {
  PENDING = 0;
  FAILED = 1;
  READY = 2;
  DELETED = 3;
  PENDING_DELETE = 4; // Token is in the process of being deleted
}

enum PaymentMethods {
  VISA = 0;
  MASTERCARD = 1;
  AMEX = 2;
  BAN_CONTACT = 3;
  CHINA_UNION_PAY = 4;
  MAESTRO = 5;
  DINERS = 6;
  DISCOVER = 7;
  JCB = 8;
  ALIPAY = 9;
  WECHAT = 10;
}
