syntax = "proto3";
package com.kodypay.grpc.pay.v1;
option java_multiple_files = true;
option java_outer_classname = "KodyPayTerminalProto";
option java_package = "com.kodypay.grpc.pay.v1";
import "google/protobuf/timestamp.proto";

service KodyPayTerminalService {
  rpc Terminals(TerminalsRequest) returns (TerminalsResponse);
  rpc Pay(PayRequest) returns (stream PayResponse);
  rpc Cancel(CancelRequest) returns (CancelResponse);
  rpc PaymentDetails(PaymentDetailsRequest) returns (PayResponse);
  rpc Refund(RefundRequest) returns (stream RefundResponse);
}

// requires X-API-Key header with 'API Key' value
message TerminalsRequest {
  string store_id = 1; // UUID of store
}
message TerminalsResponse {
  repeated Terminal terminals = 1;
}
message Terminal {
  string terminal_id = 1; // terminal serial number
  bool online = 2;
}

// requires X-API-Key header with 'API Key' value
message PayRequest {
  string store_id = 1; // UUID of store
  string amount = 2; // amount in BigDecimal/2.dp (0.00)
  string terminal_id = 3; // send the payment to this terminal serial number
  optional bool show_tips = 4; // Show tips on the terminal
  optional PaymentMethod payment_method = 5; // Choose specific payment method on the terminal
}



message PaymentMethod{
  PaymentMethodType payment_method_type = 1; // Payment method type
  // Verification mode is needed for AliPay and WeChat.
  oneof verification_mode {
    string token = 2; // With the token present QR scanning is skipped and goes straight to the payment screen.
    bool activate_qr_code_scanner = 3; // Flag to activate the terminal camera to scan the customer's QR Code (true), or display the payment method type QR Code for the user to scan (false, default).```
  }
}

enum PaymentMethodType{
  CARD = 0;
  ALIPAY = 1;
  WECHAT = 2;
}
message PayResponse {
  PaymentStatus status = 1;
  optional string failure_reason = 2; // only populated on failure
  optional string receipt_json = 3; // json blob containing the receipt data
  string order_id = 4;
  google.protobuf.Timestamp date_created = 5;
  optional string ext_payment_ref = 6;
  google.protobuf.Timestamp date_paid = 7;
  optional string total_amount = 8;
  optional string sale_amount = 9;
  optional string tips_amount = 10;
}
enum PaymentStatus {
  PENDING = 0;
  SUCCESS = 1;
  FAILED = 2;
  CANCELLED = 3;
}

// requires X-API-Key header with 'API Key' value
message CancelRequest {
  string store_id = 1; // UUID of store
  string amount = 2; // amount in BigDecimal/2.dp (0.00) - to identify the payment to cancel
  string terminal_id = 3; // to identify the terminal where the payment was sent
  optional string order_id = 4; // to identify the payment (order) to cancel
}
message CancelResponse {
  PaymentStatus status = 1;
}

// requires X-API-Key header with 'API Key' value
message PaymentDetailsRequest {
  string store_id = 1; // UUID of store
  string order_id = 2; // to identify the payment (order)
}

// requires X-API-Key header with 'API Key' value
message RefundRequest {
  string store_id = 1; // UUID of store
  string order_id = 2;
  string amount = 3; // amount in BigDecimal/2.dp (0.00)
}
message RefundResponse {
  RefundStatus status = 1;
  optional string failure_reason = 2; // only populated on failure
  string order_id = 3;
  google.protobuf.Timestamp date_created = 4;
  string total_paid_amount = 5;
  string total_amount_refunded = 6;
  string remaining_amount = 7;
  string total_amount_requested = 8;
  string paymentTransactionId = 9;
  enum RefundStatus {
    PENDING = 0;
    REQUESTED = 1;
    FAILED = 2;
  }
}
