syntax = "proto3";
package com.kodypay.grpc.pay.v1;
option java_multiple_files = true;
option java_outer_classname = "KodyPayTerminalProto";
option java_package = "com.kodypay.grpc.pay.v1";
import "google/protobuf/timestamp.proto";
import "com/kodypay/grpc/common/enums.proto";

service KodyPayTerminalService {
  rpc Terminals(TerminalsRequest) returns (TerminalsResponse);
  rpc Pay(PayRequest) returns (stream PayResponse);
  rpc Cancel(CancelRequest) returns (CancelResponse);
  rpc PaymentDetails(PaymentDetailsRequest) returns (PayResponse);
  rpc Refund(RefundRequest) returns (stream RefundResponse);
  rpc Void(VoidPaymentRequest) returns (VoidPaymentResponse);
  rpc PayWithCardToken(PayWithCardTokenRequest) returns (PayResponse);
  rpc TokenPaymentDetails(PaymentDetailsRequest) returns (PayResponse);
}

// requires X-API-Key header with 'API Key' value
message TerminalsRequest {
  string store_id = 1; // UUID of store
}
message TerminalsResponse {
  repeated Terminal terminals = 1;
}
message Terminal {
  string terminal_id = 1; // terminal serial number
  bool online = 2;
}

// requires X-API-Key header with 'API Key' value
message PayRequest {
  string store_id = 1; // UUID of store
  string amount = 2; // amount in BigDecimal/2.dp (0.00)
  string terminal_id = 3; // send the payment to this terminal serial number
  optional bool show_tips = 4; // Show tips on the terminal
  optional PaymentMethod payment_method = 5; // Choose specific payment method on the terminal. If not set the terminal will request on the screen to select the payment method
  optional string idempotency_uuid = 6; // UUID idempotency key. Can be generated by client.
  optional string payment_reference = 7; // Unique payment reference provided by client
  optional string order_id = 8; // Unique order reference provided by client
  repeated PaymentMethods accepts_only = 9; // An inclusion list of accepted payment methods. If empty, all payment methods are accepted.

  enum PaymentMethods {
    VISA = 0;
    MASTERCARD = 1;
    AMEX = 2;
    BAN_CONTACT = 3;
    CHINA_UNION_PAY = 4;
    MAESTRO = 5;
    DINERS = 6;
    DISCOVER = 7;
    JCB = 8;
    ALIPAY = 9;
    WECHAT = 10;
  }
}

message PaymentMethod {
  optional PaymentMethodType payment_method_type = 1; // Payment method type
  oneof verification_mode {
    string token = 2; // With the token present QR scanning is skipped and goes straight to the payment screen.
    bool activate_qr_code_scanner = 3; // Flag to activate the terminal camera to scan the customer's or Kody's QR Code (true), or display the payment method type QR Code for the user to scan (false, default).```
  }
}

enum PaymentMethodType {
  CARD = 0;
  E_WALLET = 1;
}

message PayResponse {
  PaymentStatus status = 1;
  optional string failure_reason = 2; // only populated on failure
  optional string receipt_json = 3 [deprecated = true]; // replaced by payment_data.receipt_json
  string payment_id = 4;
  google.protobuf.Timestamp date_created = 5;
  optional string psp_reference = 6 [deprecated = true]; // replaced by payment_data.psp_reference;
  google.protobuf.Timestamp date_paid = 7 [deprecated = true]; // replaced by payment_data.date_paid
  optional string total_amount = 8 [deprecated = true]; // replaced by payment_data.total_amount
  optional string sale_amount = 9 [deprecated = true]; // replaced by payment_data.sale_amount
  optional string tips_amount = 10 [deprecated = true]; // replaced by payment_data.tips_amount
  optional PaymentData payment_data = 11;
  optional string payment_reference = 12;
  optional string order_id = 13;
  repeated PayRequest.PaymentMethods accepts_only = 14;
  optional bool is_payment_declined = 15; // Field to be able to differentiate cancelled from declined, for Oracle use, without breaking backwards compatibility.
  repeated RefundDetails refunds = 16;

  message PaymentData {
    google.protobuf.Timestamp date_paid = 1;
    string total_amount = 2;
    string sale_amount = 3;
    string tips_amount = 4;
    string receipt_json = 5; // json blob containing the receipt data
    string psp_reference = 6;
    PaymentMethodType payment_method_type = 7;
    string payment_method = 8;
    optional PaymentCard payment_card = 9;
    optional string payment_method_variant = 10;
    optional string refund_amount = 11;

    message PaymentCard {
      string card_last_4_digits = 1;
      string card_expiry_date = 2;
      string pos_entry_mode = 3;
      string payment_token = 4;
      string auth_code = 5;
    }
  }

  message RefundDetails {
    string payment_id = 1;
    optional string refund_psp_reference = 2; // Might not have a PSP yet reference if pending
    string payment_transaction_id = 3;
    string refund_amount = 4;
    google.protobuf.Timestamp event_date = 5;
    optional string terminal_id = 6;
  }
}

enum PaymentStatus {
  PENDING = 0;
  SUCCESS = 1;
  FAILED = 2;
  CANCELLED = 3;
  DECLINED = 4;
  REFUND_PENDING = 5;
  REFUND_REQUESTED = 6;
}

// requires X-API-Key header with 'API Key' value
message CancelRequest {
  string store_id = 1; // UUID of store
  string amount = 2; // amount in BigDecimal/2.dp (0.00) - to identify the payment to cancel
  string terminal_id = 3; // to identify the terminal where the payment was sent
  optional string payment_id = 4; // to identify the payment (order) to cancel
}
message CancelResponse {
  PaymentStatus status = 1;
}

// requires X-API-Key header with 'API Key' value
message PaymentDetailsRequest {
  string store_id = 1; // UUID of store
  string order_id = 2; // payment_id returned in the payment response, to identify the payment (order)
}

// requires X-API-Key header with 'API Key' value
message RefundRequest {
  string store_id = 1; // UUID of store
  string payment_id = 2;
  string amount = 3; // amount in BigDecimal/2.dp (0.00)
  optional string idempotency_uuid = 4; // UUID idempotency key. Will be generated by client.
  optional string terminal_id = 5;
  optional string ext_pay_reference = 6;
  optional string ext_order_id = 7;
}
message RefundResponse {
  RefundStatus status = 1;
  optional string failure_reason = 2; // only populated on failure
  string payment_id = 3;
  google.protobuf.Timestamp date_created = 4;
  string total_paid_amount = 5;
  string total_amount_refunded = 6;
  string remaining_amount = 7;
  string total_amount_requested = 8;
  string paymentTransactionId = 9;
  enum RefundStatus {
    PENDING = 0;
    REQUESTED = 1;
    FAILED = 2;
  }
  optional string order_id = 10;
  optional string ext_pay_reference = 11;
  optional string ext_order_id = 12;
}

message VoidPaymentRequest {
  oneof ids {
    string psp_reference = 1;
    string payment_id = 2;
  }
  optional string payment_reference = 3 ;
  optional string order_id = 4;
  string store_id = 5;
}

message VoidPaymentResponse {
  string psp_reference = 1;
  string payment_id = 2;
  VoidStatus status = 3;
  optional SaleData sale_data = 4;
  google.protobuf.Timestamp date_voided = 5;

  enum VoidStatus {
    PENDING = 0;
    REQUESTED = 1;
    VOIDED = 2;
    FAILED = 3;
  }

  message SaleData {
    string total_amount = 1;
    string sale_amount = 2;
    string tips_amount = 3;
    string order_id = 4;
    string payment_reference = 5;
  }
}

message PayWithCardTokenRequest {
  string store_id = 1; // Your Kody store id
  string amount = 2;// amount in BigDecimal/2.dp (0.00)
  string currency = 3; // ISO 4217 three letter currency code
  string payment_token = 4;
  string expiry_date = 5; //format: MM/YY
  string idempotency_uuid = 6; // UUID idempotency key provided by client
  common.PaymentMode payment_mode = 7;
  optional string payment_reference = 8; // Unique payment reference provided by client
  optional string merchant_reference = 9;
  optional string payer_reference = 10;
  map<string, string> metadata = 11;
}
